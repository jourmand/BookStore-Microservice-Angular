// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApi.Infrastructures.Data.Commons;

namespace Endpoints.Panel.Front.Migrations
{
    [DbContext(typeof(BookStoreDbContext))]
    [Migration("20211006072421_InitialModel01")]
    partial class InitialModel01
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("WebPanel.Core.Domain.ApplicationUserAggregate.ApplicationUserInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("ApplicationUsers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8b65574d-8394-4574-8e3b-f1a9b76e50c9"),
                            Created = new DateTime(2022, 10, 12, 11, 22, 14, 0, DateTimeKind.Unspecified),
                            Email = "admin@live.com"
                        });
                });

            modelBuilder.Entity("WebPanel.Core.Domain.BookAggregate.BookItem", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Text")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.ToTable("BookItems");

                    b.HasData(
                        new
                        {
                            Id = new Guid("67e577d6-c1b7-4516-ab5f-885b3df1d22b"),
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "C#",
                            Price = 14.2m,
                            Text = "C# is a general-purpose, multi-paradigm programming language"
                        },
                        new
                        {
                            Id = new Guid("49d8d8bb-a49b-4d1c-a6e6-1a3660fb9771"),
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Asp.net",
                            Price = 31.5m,
                            Text = "ASP.NET is an open-source, server-side web-application framework"
                        },
                        new
                        {
                            Id = new Guid("291dca11-cdad-4863-8d01-265ce768cea8"),
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Angular",
                            Price = 23.9m,
                            Text = "Angular is a TypeScript-based free and open-source web application framework"
                        });
                });

            modelBuilder.Entity("WebPanel.Core.Domain.BookAggregate.BookSubscription", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BookItemId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("BookItemId");

                    b.ToTable("BookSubscriptions");
                });

            modelBuilder.Entity("WebPanel.Core.Domain.ApplicationUserAggregate.ApplicationUserInfo", b =>
                {
                    b.OwnsOne("WebPanel.Core.Domain.ApplicationUserAggregate.ValueObjects.FullName", "FullName", b1 =>
                        {
                            b1.Property<Guid>("ApplicationUserInfoId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasMaxLength(150)
                                .IsUnicode(true)
                                .HasColumnType("nvarchar(150)")
                                .HasColumnName("FirstName");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasMaxLength(150)
                                .IsUnicode(true)
                                .HasColumnType("nvarchar(150)")
                                .HasColumnName("LastName");

                            b1.HasKey("ApplicationUserInfoId");

                            b1.ToTable("ApplicationUsers");

                            b1.WithOwner()
                                .HasForeignKey("ApplicationUserInfoId");
                        });

                    b.Navigation("FullName");
                });

            modelBuilder.Entity("WebPanel.Core.Domain.BookAggregate.BookSubscription", b =>
                {
                    b.HasOne("WebPanel.Core.Domain.ApplicationUserAggregate.ApplicationUserInfo", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebPanel.Core.Domain.BookAggregate.BookItem", null)
                        .WithMany("Subscriptions")
                        .HasForeignKey("BookItemId");

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("WebPanel.Core.Domain.BookAggregate.BookItem", b =>
                {
                    b.Navigation("Subscriptions");
                });
#pragma warning restore 612, 618
        }
    }
}
